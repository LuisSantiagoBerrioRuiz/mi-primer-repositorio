todo comando tiene argumentos agregados que colocaré entre :: si es necesario 
- se usar para argumentos abreviados y -- para argumentos completos
:comando: --help // muestra todas las opciones de los comandos

pwd // ver directorio actual
mkldir :nombre de carpeta: // crear carpeta
cd // cambiar directorio
        .. // volver a la carpeta anterior 
ls // mostrar archivos y carpetas
        -al // argumentos a: archios ocultos; l: listar
clear // limpiar consola o ctrl + l 
touch // crear archivos vacios 

git status // muestra el estado actual del git
git add // añade el archivo al cache
git add . // añade todos los cambios de la carpeta
git commit // añade un git al archivo, osea el guarda las modificaciones en el git
        Si se añade un commit sin comentario se debe agregar el comentario y presionar Esc + Shift + z + z para salir del campo mostrado
        -m "comentario" // añade un comentario al git del archivo
git config // se usa para configurar el git y poder hacer commit

git log // muestra la historia del archivo
        --stat // muestra más detalles de los commit y el historial
git show // muestra los cambios que ha sufrido el archivo
        Este comando muestra el codigo del commit que se puede usar para diferenciar entre versiones del archivo
git diff // necesita dos codigos del commit para diferenciar entre versiones y cuales han sido las mofificafiones entre estas

rm :archivo: // borrar archivos y carpetas 
        --catched // Elimina archivos del repositorio local y del área de staging, pero los mantiene en el disco duro. Deja de trackear el historial de cambios de estos archivos, por lo que quedan en estado untracked. 
        --force: // Elimina los archivos de Git y del disco duro. Git guarda todo, por lo que podemos recuperar archivos eliminados si es necesario (empleando comandos avanzados).
git reset :codigo commit: // restaura una version anterior
                 --hard // Deshace todo, absolutamente todo. Toda la información de los commits y del área de staging se elimina del historial
                 --soft // Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging para aplicar las últimas actualizaciones a un nuevo commit.
                 --mixed // Borra todo, exactamente todo. Toda la información de los commits y del área de staging se elimina del historial.
git reset HEAD // El comando git reset saca archivos del área de staging sin borrarlos ni realizar otras acciones. Esto impide que los últimos cambios en estos archivos se envíen al último commit. Podemos incluirlos de nuevo en staging con git add si cambiamos de opinión.
                La diferencia principal entre git rm y git reset HEAD radica en que git rm elimina archivos del repositorio y de la historia del proyecto, 
                mientras que git reset saca los cambios del área de preparación y los mueve del espacio de trabajo, sin afectar la historia del repositorio.
git checkout :codigo commit: :archivo: // devuelve el archivo en especifico para que pueda ser modificado
                Este comando es el que se usa para hacer cambios y actualizaciones en los proyectos
                :rama: // nos mueve a la rama especificada

git clone :url: // Hago una copia de un repositorio y directorio remoto a mi repositorio y directorio local
                Este comando se usa la primera vez para traer el proyecto a colaborar, despues se usan los siguientes comandos
git push // envia mi repositorio local al repositorio remoto
git fetch // copia solo el repositorio remoto a mi repositorio local 
git merge // copia solo el directorio remoto a mi directorio local
git pull // copia el repositorio y directorio remoto a mi oyedirectorio local

git branch :nombre: // crea una nueva rama con nombre
        Las ramas nos permiten modificar los archivos de forma rapida y precisa
