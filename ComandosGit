todo comando tiene argumentos agregados que colocaré entre :: si es necesario 
- se usar para argumentos abreviados y -- para argumentos completos
:comando: --help // muestra todas las opciones de los comandos

se pueden guardar codigos complejos con el comando alias :nombre:=:codigo complejos:
por ejemplo
alias linea="git log --all --graph --decorate --oneline"

pwd // ver directorio actual

mkldir :nombre de carpeta: // crear carpeta

cd // cambiar directorio
        .. // volver a la carpeta anterior 
ls // mostrar archivos y carpetas
        -al // argumentos a: archivos ocultos; l: listar

clear // limpiar consola o ctrl + l

touch // crear archivos vacios 

git status // muestra el estado actual del git

git add :archivo:// añade el archivo al cache
        . // añade todos los cambios de la carpeta

git commit // añade un git al archivo, osea el guarda las modificaciones en el git
        Si se añade un commit sin comentario se debe agregar el comentario y presionar Esc + Shift + z + z para salir del campo mostrado
        -m "comentario" // añade un comentario al git del archivo
        -am "comentario" // añade los cambios no guardados en el staging y un comentario al git del archivo

git config // se usa para configurar el git y poder hacer commit

git log // muestra la historia del archivo
        --stat // muestra más detalles de los commit y el historial

git show // muestra los cambios que ha sufrido el archivo
        Este comando muestra el codigo del commit que se puede usar para diferenciar entre versiones del archivo
        -ref --tags // nos muestra los hashs que tienen tags

git diff :hashs:  :hashs:// necesita dos codigos del commit para diferenciar entre versiones y cuales han sido las mofificafiones entre estas

rm :archivo: // borrar archivos y carpetas 
        --catched // Elimina archivos del repositorio local y del área de staging, pero los mantiene en el disco duro. Deja de trackear el historial de cambios de estos archivos, por lo que quedan en estado untracked. 
        --force: // Elimina los archivos de Git y del disco duro. Git guarda todo, por lo que podemos recuperar archivos eliminados si es necesario (empleando comandos avanzados).

git reset :hashs: o :head: // restaura una version anterior
                 --hard // Deshace todo, absolutamente todo. Toda la información de los commits y del área de staging se elimina del historial
                 --soft // Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging para aplicar las últimas actualizaciones a un nuevo commit.
                 --mixed // Borra todo, exactamente todo. Toda la información de los commits y del área de staging se elimina del historial.

git reflog // muestra todo el log y los head del historial incluido los que han sido eliminados

git checkout :codigo commit: :archivo: // devuelve el archivo en especifico para que pueda ser modificado
                Este comando es el que se usa para hacer cambios y actualizaciones en los proyectos
                :rama: // nos mueve a la rama especificada

git clone :url: // Hago una copia de un repositorio y directorio remoto a mi repositorio y directorio local
                Este comando se usa la primera vez para traer el proyecto a colaborar, despues se usan los siguientes comandos

git push // envia mi repositorio local al repositorio remoto
        origin :rama:// envia mi repositorio local al repositorio remoto
                --tags // solo envia los tags creados

git fetch // copia solo el repositorio remoto a mi repositorio local 

git merge // copia solo el directorio remoto a mi directorio local
        :rama: // actualiza la rama actual a la rama seleccionada
        -m :comentario:

git pull // copia el repositorio y directorio remoto a mi directorio local
        origin // traer el repositorio remoto al local
                --tags // trae el solo los tags creados 

git tags  // Muestra los tags creados. Los tags nos permiten identificar los archivos de forma rapida y precisa
        -a :version: // para crear el nombre de la verisón
        -m :comentario: 
        -d :version: // para eliminar la version selecionada
        :hashs:

git branch // Muestra las ramas creadas. Las ramas nos permiten modificar los archivos de forma rapida y precisa
        :nombre: // crea una nueva rama con nombre

git rebase // reescribe la historia del repositorio, cambia la historia de donde comenzó la rama y solo debe ser usado de manera local
               
git stash // nos sirve para guardar cambios para después (to stash se puede traducir como almacenar)
        pop // agrega los cambios guardados en el stash anterior
        list // muestra la lista de los stashed guardados
        branch :rama: // crea una rama en la que agrega el stash "sin hacer commit"
        drop // elimina el stach guardado

git clean // por si solo no funciona, hay que agregar comandos
        --dry-run o -n // simula la eliminación, funciona para saber cuales elementos se eliminaran
        -f // elimina los archivos sin seguimiento del directorio
        -d // elimina directorios sin seguimiento del directorio
        -x // elimina los archivos sin seguimiento del directorio incluyendo los ignorados (.gitignore)
        -X // elimina solo los archivos ignorados (.gitignore)
                estos comandos se pueden mezclar, unos ejemplo  
                -dn -df -xdn -xdf 

git cherry-pick :hashs:  // nos permite aplicar un commit de otra rama sin tener que aplicar un merge 
                        hay que tener cuidado ya que a la hora de aplicar el merge puede generar conflictos  